// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using manage_grp.Server.Data.Contexts;

#nullable disable

namespace manage_grp.Server.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250319173814_Initial-migration")]
    partial class Initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("manage_grp.Server.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DependencyId")
                        .HasColumnType("int");

                    b.Property<int>("ExteriorNumber")
                        .HasColumnType("int");

                    b.Property<int?>("InteriorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("manage_grp.Server.Models.AreaServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("AreaServiceTypes");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetKeyDefault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("BudgetKeyDefaults");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetaryKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("DependencyId");

                    b.ToTable("BudgetaryKeys");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetaryKeyDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("BudgetaryKeyDocumentTypes");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetaryKeyDocumentTypeBudgetaryKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetaryKeyDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BudgetaryKeyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BudgetaryKeyDocumentTypeId");

                    b.HasIndex("BudgetaryKeyId");

                    b.ToTable("BudgetaryKeyDocumentTypeBudgetaryKeys");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MaternalLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaternalLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DependencyId");

                    b.HasIndex("PositionId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Dependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rfc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentRequirementId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentRequirementId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("manage_grp.Server.Models.DocumentRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BudgetaryKeyDocumentTypeBudgetaryKeyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourceDistributionDocumentTypeResourceDistributionId")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("TenderDocumentTypeTenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BudgetaryKeyDocumentTypeBudgetaryKeyId")
                        .IsUnique()
                        .HasFilter("[BudgetaryKeyDocumentTypeBudgetaryKeyId] IS NOT NULL");

                    b.HasIndex("ResourceDistributionDocumentTypeResourceDistributionId")
                        .IsUnique()
                        .HasFilter("[ResourceDistributionDocumentTypeResourceDistributionId] IS NOT NULL");

                    b.HasIndex("TenderDocumentTypeTenderId")
                        .IsUnique()
                        .HasFilter("[TenderDocumentTypeTenderId] IS NOT NULL");

                    b.ToTable("DocumentRequirements");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalMunicipalityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExternalMunicipalityId")
                        .IsUnique()
                        .HasFilter("[ExternalMunicipalityId] IS NOT NULL");

                    b.HasIndex("StateId");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("AllowedHierarchyLevels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"State\"]",
                            Entity = "Municipality"
                        },
                        new
                        {
                            Id = 2,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"State\"]",
                            Entity = "Municipality"
                        },
                        new
                        {
                            Id = 3,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"State\"]",
                            Entity = "Municipality"
                        },
                        new
                        {
                            Id = 4,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"State\"]",
                            Entity = "Municipality"
                        },
                        new
                        {
                            Id = 5,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Municipality\"]",
                            Entity = "Dependency"
                        },
                        new
                        {
                            Id = 6,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Municipality\"]",
                            Entity = "Dependency"
                        },
                        new
                        {
                            Id = 7,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Municipality\"]",
                            Entity = "Dependency"
                        },
                        new
                        {
                            Id = 8,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Municipality\"]",
                            Entity = "Dependency"
                        },
                        new
                        {
                            Id = 9,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "Area"
                        },
                        new
                        {
                            Id = 10,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "Area"
                        },
                        new
                        {
                            Id = 11,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "Area"
                        },
                        new
                        {
                            Id = 12,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "Area"
                        },
                        new
                        {
                            Id = 13,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Area\"]",
                            Entity = "AreaServiceType"
                        },
                        new
                        {
                            Id = 14,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Area\"]",
                            Entity = "AreaServiceType"
                        },
                        new
                        {
                            Id = 15,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Area\"]",
                            Entity = "AreaServiceType"
                        },
                        new
                        {
                            Id = 16,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Area\"]",
                            Entity = "AreaServiceType"
                        },
                        new
                        {
                            Id = 17,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "User"
                        },
                        new
                        {
                            Id = 18,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "User"
                        },
                        new
                        {
                            Id = 19,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "User"
                        },
                        new
                        {
                            Id = 20,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "User"
                        },
                        new
                        {
                            Id = 21,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Role"
                        },
                        new
                        {
                            Id = 22,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Role"
                        },
                        new
                        {
                            Id = 23,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Role"
                        },
                        new
                        {
                            Id = 24,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Role"
                        },
                        new
                        {
                            Id = 25,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Position"
                        },
                        new
                        {
                            Id = 26,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Position"
                        },
                        new
                        {
                            Id = 27,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Position"
                        },
                        new
                        {
                            Id = 28,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Position"
                        },
                        new
                        {
                            Id = 29,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Contact"
                        },
                        new
                        {
                            Id = 30,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Contact"
                        },
                        new
                        {
                            Id = 31,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Contact"
                        },
                        new
                        {
                            Id = 32,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Contact"
                        },
                        new
                        {
                            Id = 33,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Address"
                        },
                        new
                        {
                            Id = 34,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Address"
                        },
                        new
                        {
                            Id = 35,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Address"
                        },
                        new
                        {
                            Id = 36,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"State\",\"Municipality\",\"Dependency\",\"Area\"]",
                            Entity = "Address"
                        },
                        new
                        {
                            Id = 37,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetaryKeyDocumentType"
                        },
                        new
                        {
                            Id = 38,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetaryKeyDocumentType"
                        },
                        new
                        {
                            Id = 39,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetaryKeyDocumentType"
                        },
                        new
                        {
                            Id = 40,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetaryKeyDocumentType"
                        },
                        new
                        {
                            Id = 41,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetKeyDefault"
                        },
                        new
                        {
                            Id = 42,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetKeyDefault"
                        },
                        new
                        {
                            Id = 43,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetKeyDefault"
                        },
                        new
                        {
                            Id = 44,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetKeyDefault"
                        },
                        new
                        {
                            Id = 45,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetaryKey"
                        },
                        new
                        {
                            Id = 46,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetaryKey"
                        },
                        new
                        {
                            Id = 47,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetaryKey"
                        },
                        new
                        {
                            Id = 48,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "BudgetaryKey"
                        },
                        new
                        {
                            Id = 49,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceDistributionDocumentType"
                        },
                        new
                        {
                            Id = 50,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceDistributionDocumentType"
                        },
                        new
                        {
                            Id = 51,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceDistributionDocumentType"
                        },
                        new
                        {
                            Id = 52,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceDistributionDocumentType"
                        },
                        new
                        {
                            Id = 53,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceType"
                        },
                        new
                        {
                            Id = 54,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceType"
                        },
                        new
                        {
                            Id = 55,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceType"
                        },
                        new
                        {
                            Id = 56,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceType"
                        },
                        new
                        {
                            Id = 57,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceDistribution"
                        },
                        new
                        {
                            Id = 58,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceDistribution"
                        },
                        new
                        {
                            Id = 59,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceDistribution"
                        },
                        new
                        {
                            Id = 60,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "ResourceDistribution"
                        },
                        new
                        {
                            Id = 61,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderType"
                        },
                        new
                        {
                            Id = 62,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderType"
                        },
                        new
                        {
                            Id = 63,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderType"
                        },
                        new
                        {
                            Id = 64,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderType"
                        },
                        new
                        {
                            Id = 65,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderFundingSource"
                        },
                        new
                        {
                            Id = 66,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderFundingSource"
                        },
                        new
                        {
                            Id = 67,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderFundingSource"
                        },
                        new
                        {
                            Id = 68,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderFundingSource"
                        },
                        new
                        {
                            Id = 69,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderStatus"
                        },
                        new
                        {
                            Id = 70,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderStatus"
                        },
                        new
                        {
                            Id = 71,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderStatus"
                        },
                        new
                        {
                            Id = 72,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderStatus"
                        },
                        new
                        {
                            Id = 73,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderPriceType"
                        },
                        new
                        {
                            Id = 74,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderPriceType"
                        },
                        new
                        {
                            Id = 75,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderPriceType"
                        },
                        new
                        {
                            Id = 76,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderPriceType"
                        },
                        new
                        {
                            Id = 77,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderDocumentType"
                        },
                        new
                        {
                            Id = 78,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderDocumentType"
                        },
                        new
                        {
                            Id = 79,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderDocumentType"
                        },
                        new
                        {
                            Id = 80,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "TenderDocumentType"
                        },
                        new
                        {
                            Id = 81,
                            Action = "Read",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "Tender"
                        },
                        new
                        {
                            Id = 82,
                            Action = "Create",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "Tender"
                        },
                        new
                        {
                            Id = 83,
                            Action = "Update",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "Tender"
                        },
                        new
                        {
                            Id = 84,
                            Action = "Delete",
                            AllowedHierarchyLevels = "[\"Dependency\"]",
                            Entity = "Tender"
                        });
                });

            modelBuilder.Entity("manage_grp.Server.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("manage_grp.Server.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("BudgetaryKeyId")
                        .HasColumnType("int");

                    b.Property<string>("Concept")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResourceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BudgetaryKeyId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("ResourceDistributions");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistributionDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("ResourceDistributionDocumentTypes");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistributionDocumentTypeResourceDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ResourceDistributionDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceDistributionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResourceDistributionDocumentTypeId");

                    b.HasIndex("ResourceDistributionId");

                    b.ToTable("ResourceDistributionDocumentTypeResourceDistributions");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistributionTender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ResourceDistributionId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ResourceDistributionId");

                    b.HasIndex("TenderId");

                    b.ToTable("ResourceDistributionTenders");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("ResourceTypes");
                });

            modelBuilder.Entity("manage_grp.Server.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalStateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExternalStateId")
                        .IsUnique()
                        .HasFilter("[ExternalStateId] IS NOT NULL");

                    b.ToTable("States");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Tender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AreaServiceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenderFundingSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("TenderPriceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TenderStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TenderTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AreaServiceTypeId");

                    b.HasIndex("TenderFundingSourceId");

                    b.HasIndex("TenderPriceTypeId");

                    b.HasIndex("TenderStatusId");

                    b.HasIndex("TenderTypeId");

                    b.ToTable("Tenders");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("Mandatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("TenderDocumentTypes");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderDocumentTypeTender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("TenderDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TenderDocumentTypeId");

                    b.HasIndex("TenderId");

                    b.ToTable("TenderDocumentTypeTenders");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderFundingSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("TenderFundingSources");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderPriceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("TenderPriceTypes");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("TenderStatuses");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DependencyId");

                    b.ToTable("TenderTypes");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<int?>("DependencyId")
                        .HasColumnType("int");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasIndex("DependencyId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("StateId");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("manage_grp.Server.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("DependencyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaternalLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<string>("PaternalLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasIndex("DependencyId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("StateId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("manage_grp.Server.Models.Address", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId");

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Area", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.AreaServiceType", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Area", "Area")
                        .WithMany("AreaServiceTypes")
                        .HasForeignKey("AreaId");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetKeyDefault", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetaryKey", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany("BudgetaryKeys")
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetaryKeyDocumentType", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetaryKeyDocumentTypeBudgetaryKey", b =>
                {
                    b.HasOne("manage_grp.Server.Models.BudgetaryKeyDocumentType", "BudgetaryKeyDocumentType")
                        .WithMany("BudgetaryKeyDocumentTypeBudgetaryKeys")
                        .HasForeignKey("BudgetaryKeyDocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("manage_grp.Server.Models.BudgetaryKey", "BudgetaryKey")
                        .WithMany("BudgetaryKeyDocumentTypeBudgetaryKeys")
                        .HasForeignKey("BudgetaryKeyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BudgetaryKey");

                    b.Navigation("BudgetaryKeyDocumentType");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Contact", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("manage_grp.Server.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Dependency");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Dependency", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Municipality", "Municipality")
                        .WithMany("Dependencies")
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Document", b =>
                {
                    b.HasOne("manage_grp.Server.Models.DocumentRequirement", "DocumentRequirement")
                        .WithMany()
                        .HasForeignKey("DocumentRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentRequirement");
                });

            modelBuilder.Entity("manage_grp.Server.Models.DocumentRequirement", b =>
                {
                    b.HasOne("manage_grp.Server.Models.BudgetaryKeyDocumentTypeBudgetaryKey", "BudgetaryKeyDocumentTypeBudgetaryKey")
                        .WithOne("DocumentRequirement")
                        .HasForeignKey("manage_grp.Server.Models.DocumentRequirement", "BudgetaryKeyDocumentTypeBudgetaryKeyId");

                    b.HasOne("manage_grp.Server.Models.ResourceDistributionDocumentTypeResourceDistribution", "ResourceDistributionDocumentTypeResourceDistribution")
                        .WithOne("DocumentRequirement")
                        .HasForeignKey("manage_grp.Server.Models.DocumentRequirement", "ResourceDistributionDocumentTypeResourceDistributionId");

                    b.HasOne("manage_grp.Server.Models.TenderDocumentTypeTender", "TenderDocumentTypeTender")
                        .WithOne("DocumentRequirement")
                        .HasForeignKey("manage_grp.Server.Models.DocumentRequirement", "TenderDocumentTypeTenderId");

                    b.Navigation("BudgetaryKeyDocumentTypeBudgetaryKey");

                    b.Navigation("ResourceDistributionDocumentTypeResourceDistribution");

                    b.Navigation("TenderDocumentTypeTender");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Municipality", b =>
                {
                    b.HasOne("manage_grp.Server.Models.State", "State")
                        .WithMany("Municipalities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Position", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.RefreshToken", b =>
                {
                    b.HasOne("manage_grp.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistribution", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("manage_grp.Server.Models.BudgetaryKey", "BudgetaryKey")
                        .WithMany()
                        .HasForeignKey("BudgetaryKeyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("manage_grp.Server.Models.ResourceType", "ResourceType")
                        .WithMany()
                        .HasForeignKey("ResourceTypeId");

                    b.Navigation("Area");

                    b.Navigation("BudgetaryKey");

                    b.Navigation("ResourceType");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistributionDocumentType", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistributionDocumentTypeResourceDistribution", b =>
                {
                    b.HasOne("manage_grp.Server.Models.ResourceDistributionDocumentType", "ResourceDistributionDocumentType")
                        .WithMany("ResourceDistributionDocumentTypeResourceDistributions")
                        .HasForeignKey("ResourceDistributionDocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("manage_grp.Server.Models.ResourceDistribution", "ResourceDistribution")
                        .WithMany("ResourceDistributionDocumentTypeResourceDistributions")
                        .HasForeignKey("ResourceDistributionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ResourceDistribution");

                    b.Navigation("ResourceDistributionDocumentType");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistributionTender", b =>
                {
                    b.HasOne("manage_grp.Server.Models.ResourceDistribution", "ResourceDistribution")
                        .WithMany("ResourceDistributionTenders")
                        .HasForeignKey("ResourceDistributionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("manage_grp.Server.Models.Tender", "Tender")
                        .WithMany("ResourceDistributionTenders")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourceDistribution");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceType", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Tender", b =>
                {
                    b.HasOne("manage_grp.Server.Models.AreaServiceType", "AreaServiceType")
                        .WithMany("Tenders")
                        .HasForeignKey("AreaServiceTypeId");

                    b.HasOne("manage_grp.Server.Models.TenderFundingSource", "TenderFundingSource")
                        .WithMany()
                        .HasForeignKey("TenderFundingSourceId");

                    b.HasOne("manage_grp.Server.Models.TenderPriceType", "TenderPriceType")
                        .WithMany()
                        .HasForeignKey("TenderPriceTypeId");

                    b.HasOne("manage_grp.Server.Models.TenderStatus", "TenderStatus")
                        .WithMany()
                        .HasForeignKey("TenderStatusId");

                    b.HasOne("manage_grp.Server.Models.TenderType", "TenderType")
                        .WithMany()
                        .HasForeignKey("TenderTypeId");

                    b.Navigation("AreaServiceType");

                    b.Navigation("TenderFundingSource");

                    b.Navigation("TenderPriceType");

                    b.Navigation("TenderStatus");

                    b.Navigation("TenderType");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderDocumentType", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderDocumentTypeTender", b =>
                {
                    b.HasOne("manage_grp.Server.Models.TenderDocumentType", "TenderDocumentType")
                        .WithMany("TenderDocumentTypeTenders")
                        .HasForeignKey("TenderDocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("manage_grp.Server.Models.Tender", "Tender")
                        .WithMany("TenderDocumentTypeTenders")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tender");

                    b.Navigation("TenderDocumentType");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderFundingSource", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany("TenderFundingSources")
                        .HasForeignKey("DependencyId");

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderPriceType", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany("TenderPriceTypes")
                        .HasForeignKey("DependencyId");

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderStatus", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany("TenderStatuses")
                        .HasForeignKey("DependencyId");

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderType", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany("TenderTypes")
                        .HasForeignKey("DependencyId");

                    b.Navigation("Dependency");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Role", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId");

                    b.HasOne("manage_grp.Server.Models.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("manage_grp.Server.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Dependency");

                    b.Navigation("Municipality");

                    b.Navigation("State");
                });

            modelBuilder.Entity("manage_grp.Server.Models.User", b =>
                {
                    b.HasOne("manage_grp.Server.Models.Dependency", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId");

                    b.HasOne("manage_grp.Server.Models.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.HasOne("manage_grp.Server.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Dependency");

                    b.Navigation("Municipality");

                    b.Navigation("State");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Area", b =>
                {
                    b.Navigation("AreaServiceTypes");
                });

            modelBuilder.Entity("manage_grp.Server.Models.AreaServiceType", b =>
                {
                    b.Navigation("Tenders");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetaryKey", b =>
                {
                    b.Navigation("BudgetaryKeyDocumentTypeBudgetaryKeys");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetaryKeyDocumentType", b =>
                {
                    b.Navigation("BudgetaryKeyDocumentTypeBudgetaryKeys");
                });

            modelBuilder.Entity("manage_grp.Server.Models.BudgetaryKeyDocumentTypeBudgetaryKey", b =>
                {
                    b.Navigation("DocumentRequirement");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Dependency", b =>
                {
                    b.Navigation("BudgetaryKeys");

                    b.Navigation("TenderFundingSources");

                    b.Navigation("TenderPriceTypes");

                    b.Navigation("TenderStatuses");

                    b.Navigation("TenderTypes");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Municipality", b =>
                {
                    b.Navigation("Dependencies");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistribution", b =>
                {
                    b.Navigation("ResourceDistributionDocumentTypeResourceDistributions");

                    b.Navigation("ResourceDistributionTenders");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistributionDocumentType", b =>
                {
                    b.Navigation("ResourceDistributionDocumentTypeResourceDistributions");
                });

            modelBuilder.Entity("manage_grp.Server.Models.ResourceDistributionDocumentTypeResourceDistribution", b =>
                {
                    b.Navigation("DocumentRequirement");
                });

            modelBuilder.Entity("manage_grp.Server.Models.State", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("manage_grp.Server.Models.Tender", b =>
                {
                    b.Navigation("ResourceDistributionTenders");

                    b.Navigation("TenderDocumentTypeTenders");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderDocumentType", b =>
                {
                    b.Navigation("TenderDocumentTypeTenders");
                });

            modelBuilder.Entity("manage_grp.Server.Models.TenderDocumentTypeTender", b =>
                {
                    b.Navigation("DocumentRequirement");
                });
#pragma warning restore 612, 618
        }
    }
}
